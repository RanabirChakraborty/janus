---
- ansible.builtin.include_tasks: roles/janus/tasks/prereqs.yml

- assert:
    that:
      - upstream_namespace is defined and upstream_namespace != ""
      - upstream_name is defined and upstream_name != ""
      - downstream_name is defined and downstream_name != ""
    quiet: true
    fail_msg: "Required parameters have not been provided"

- ansible.builtin.include_tasks: validations/path_check.yml
  vars:
    path_to_validate: "{{ project_root_folder }}"

- name: "Define path to downstream project"
  ansible.builtin.set_fact:
    downstream_project: "{{ downstream_projects_dir }}/{{ downstream_name }}"

- name: "Create new downtream project folder"
  ansible.builtin.file:
    path: "{{ downstream_project }}/roles"
    state: directory

- name: "Copy all files from {{ project_root_folder }} to {{ downstream_project }}"
  ansible.builtin.include_tasks: copy_subfolders.yml
  vars:
    src: "{{ project_root_folder }}/"
    dest: "{{ downstream_project }}"

#### Workaround: needs to find a way for rsync to NOT copy overs the roles folder

- name: "Delete roles/ folder in {{ downstream_project }}."
  ansible.builtin.file:
    path: "{{ downstream_project }}/roles"
    state: absent
  changed_when: False

- name: "Creates empty roles/ directory in {{ downstream_project }}."
  ansible.builtin.file:
    path: "{{ downstream_project }}/roles"
    state: directory
  changed_when: False
######

- name: "Rewrite galaxy.yml"
  ansible.builtin.include_tasks: galaxy.yml

- name: "List all roles within {{ project_root_folder }}/roles"
  ansible.builtin.find:
    paths: "{{ project_root_folder }}/roles"
    recurse: no
    file_type: directory
  register: upstream_roles

- debug:
    var: upstream_roles.files

- ansible.builtin.include_tasks: process_role.yml
  vars:
    role_folder: "{{ item }}"
  loop: "{{ upstream_roles.files }}"

- set_fact:
    path_to_playbooks_dir: "{{ project_root_folder }}/playbooks"
    path_to_playbooks_dir_dest: "{{ downstream_project }}"

- name: "Load metadata on folder {{ path_to_playbooks_dir }}"
  ansible.builtin.stat:
    path: "{{ path_to_playbooks_dir }}"
  register: is_playbook_dir

- debug:
    msg: "{{ is_playbook_dir.stat }}"

- block:

    - name: "List all playbooks within {{ project_root_folder }}/playbooks"
      ansible.builtin.find:
        paths: "{{ project_root_folder }}/playbooks"
        recurse: no
        patterns: '*.yml'
      register: upstream_playbooks

    - debug:
        msg: "{{ playbook.path }}"
      loop: "{{ upstream_playbooks.files }}"
      loop_control:
        loop_var: playbook

    - name: "Copy files {{ path_to_playbooks_dir }} to {{ path_to_playbooks_dir_dest }}"
      ansible.posix.synchronize:
        src: "{{ path_to_playbooks_dir }}"
        dest: "{{ path_to_playbooks_dir_dest }}"
        copy_links: yes

    - name: "List all playbooks within {{ path_to_playbooks_dir_dest }}/playbooks"
      ansible.builtin.find:
        paths: "{{ path_to_playbooks_dir_dest }}/playbooks"
        recurse: no
        patterns: '*.yml'
      register: downstream_playbooks

    - debug:
        msg: "{{ playbook.path }}"
      loop: "{{ downstream_playbooks.files }}"
      loop_control:
        loop_var: playbook

    - ansible.builtin.include_tasks: rename_vars_in_file.yml
      vars:
        path_to_file: "{{ playbook_file.path }}"
      loop: "{{ downstream_playbooks.files }}"
      loop_control:
        loop_var: playbook_file

    - name: "Update all reference to upstream namespace '{{ upstream_namespace }}' to downstream one '{{ downstream_namespace }}'."
      ansible.builtin.replace:
        path: "{{ playbook_file.path }}"
        regexp: "{{ upstream_namespace }}\\.(.*$)"
        replace: "{{ downstream_namespace }}.\\1"
            #validate: "python -c 'import yaml, sys; print(yaml.safe_load(sys.stdin))'"
      loop: "{{ downstream_playbooks.files }}"
      loop_control:
        loop_var: playbook_file
  when:
    - is_playbook_dir.stat.exists

- ansible.builtin.include_tasks: update_playbooks.yml
  vars:
    root_folder: "{{ downstream_project }}/playbooks/"

- name: "Update all dependency to upstream collection '{{ upstream_namespace }}.*' to downstream's one '{{ downstream_namespace }}'."
  debug:
    msg: "TODO"

- name: "List all roles within {{ downstream_project }}/roles"
  ansible.builtin.find:
    paths: "{{ downstream_project }}/roles"
    recurse: no
    file_type: directory
  register: downstream_roles

- assert:
    that:
      - downstream_roles is defined
    quiet: True
    fail_msg: "Internal error, can't list roles within: {{ downstream_project }}/roles"

- ansible.builtin.include_tasks: switch_role_dependency_to_downstream.yml
  vars:
    path_to_meta_main_yml: "{{ downstream_roles_file.path }}/meta/main.yml"
  loop: "{{ downstream_roles.files }}"
  loop_control:
    loop_var: downstream_roles_file
  when:
    - downstream_roles.files is defined
